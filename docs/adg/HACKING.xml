<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                         "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="HACKING">
<title>Code contributions</title>
<subtitle>Conventions used by the ADG canvas project</subtitle>

<para>This is a high-level guide on how the ADG project is organized and
how to get started hacking on it. Just keep in mind the following
statements should be considered recommendations, not rules.</para>


<simplesect id="HACKING.patches">
<title>Hints on how to submit patches</title>

<para>Any patch worth the inclusion in the mainstream can be submitted in
different ways:</para>

<itemizedlist>
<listitem>attach it to the <ulink url="http://dev.entidi.com/p/adg/issues/">bug tracker</ulink>
   when a specific issue is addressed;</listitem>
<listitem>via <ulink url="http://lists.sourceforge.net/lists/listinfo/adg-devel">mailing list</ulink>
   if the patch probably needs further discussion;</listitem>
<listitem>send a pull request in any of the public git repository listed
   belowif you are already registered in one of them.</listitem>
</itemizedlist>

<para>The project uses <ulink url="http://git-scm.com/">git</ulink> as version control system.
In the following the public repository that we keep up to date:</para>

<orderedlist>
   <listitem><ulink url="http://github.com/ntd/adg">GitHub</ulink></listitem>
   <listitem><ulink url="http://gitorious.org/adg">Gitorious</ulink></listitem>
   <listitem><ulink url="http://p.sf.net/adg/git">SourceForge</ulink></listitem>
   <listitem><ulink url="http://repo.or.cz/w/adg.git">repo.cz</ulink></listitem>
</orderedlist>

<para>The preferred way to create a patch is by using <command>git format-patch</command> to
generate the file. A typical usage involves the following steps:</para>

<informalexample><programlisting language="sh">git clone git://repo.or.cz/adg.git
cd adg
# Modify and test...
git commit -a
# Write the commit message
git format-patch HEAD^
# A 0001-* file with your patch has been created</programlisting></informalexample>
</simplesect>

<simplesect id="HACKING.style">
<title>Coding style</title>

<para>The easiest way to hack the core of the ADG project (plain C language)
is by following the code close to the place you are hacking, but if you
want a written down set of rules, the coding style is loosely based on
the <ulink url="http://www.netbsd.org/docs/kernel/programming.html">kernel normal form</ulink>
style using a 4 space indentation. The tabs should be expanded to spaces
and there must not be any trailing spaces at the end of line or empty
lines at the end of a file (they are a PITA in version control). A
common way to deal with the latter problem is to enable the
<ulink url="http://dev.entidi.com/p/adg/source/tree/master/nodist/pre-commit">pre-commit</ulink>
hook in your own repository:</para>

<informalexample><programlisting language="sh">cd adg
cp nodist/pre-commit .git/hooks
chmod 0755 .git/hooks/pre-commit</programlisting></informalexample>
</simplesect>

<simplesect id="HACKING.API">
<title>API conventions</title>

<para>The rules used by the API are more rigid and they are strictly tied to the
<ulink url="http://library.gnome.org/devel/gobject/stable/gtype-conventions.html">GObject</ulink>
API conventions. The prefixes must be <code>ADG</code>, <code>Adg</code> and <code>adg</code> for the ADG canvas
and <code>CPML</code>, <code>Cpml</code> and <code>cpml</code> for the cairo path manipulation library. In
addition, the following suggestions/rules also apply:</para>

<informalexample><programlisting language="C">/* Method emitting "signal-name" */
void            adg_object_signal_name          (AdgObject      *object,
                                                 /* Other parameters */);

/* Generic setter method */
void            adg_object_set_value            (AdgObject      *object,
                                                 const AdgValue *value);
/* Setter method for boolean values */
void            adg_object_switch_boolean_value (AdgObject      *object,
                                                 gboolean       *new_state);

/* Generic getter method */
const AdgValue *adg_object_get_value            (AdgObject      *object);

/* Getter method for boolean values */
gboolean        adg_object_has_boolean_value    (AdgObject      *object);

/* Getter method for reference counted values: an object could be
 * referenced and unreferenced also if read-only, so no const needed */
AdgObject *     adg_object_get_object           (AdgObject      *object);

/* Getter method returning scalar values must not be const:
 * they are passed by value */
ScalarType      adg_object_get_scalar_value     (AdgObject      *object);

/* Alternative getter method to use when the generic syntax is
 * not allowed, such as when the value is dynamically generated */
void            adg_object_put_value            (AdgObject      *object,
                                                 AdgValue       *value);

/* Different version of the same setter method for pair values */
void            adg_object_set_value            (AdgObject      *object,
                                                 const AdgPair  *value);
void            adg_object_set_value_explicit   (AdgObject      *object,
                                                 gdouble         value_x,
                                                 gdouble         value_y);
void            adg_object_set_value_from_model (AdgADim        *adim,
                                                 AdgModel       *model,
                                                 const gchar    *named_pair);</programlisting></informalexample>

<para>The methods should be grouped by argument, that is methods working on the
same subject should be adjacents. The constructors must be the first ones
while the helper methods for signal emission should be the last ones.
It is preferable to keep the setter before the getter in the list.</para>

<para>For any other non-C contribution (makefiles, translations, bindings,
documentation, whatever) just follow the surronding text using a bit of
common sense. When no surrounding text exists, use your preferred style
and use it consistently.</para>

</simplesect>

<simplesect id="HACKING.Use">
<title>How the API should be used</title>

<para>The getter methods must be considered read-only. Although in some
circumstances some of them do not return a <emphasis>const</emphasis> value,
this is done just to allow referencing and unreferencing an object,
but still that object should be considered read-only. This means to
change a property you should write something along these lines:</para>
<informalexample><programlisting language="C">CpmlExtents extents;

cpml_extents_copy(&amp;extents, adg_entity_get_extents(entity));
/* Modify extents... */
adg_entity_set_extents(entity, &amp;extents);</programlisting></informalexample>

<para>The <emphasis>put</emphasis> version of a getter usually does not have the setter
counterpart (because the returned value is typically computed) so the
above will be reduced to:</para>
<informalexample><programlisting language="C">CpmlExtents extents;

cpml_segment_put_extents(segment, &amp;extents);
/* Use extents... */</programlisting></informalexample>
</simplesect>
</chapter>
