<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                         "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="TODO">
<title>Planned features</title>
<subtitle>A very rough roadmap of ADG features implementation</subtitle>

<para>The following list is roughly in implementation order. All the improvements
must be reflected in the demo programs, where applicable.</para>

<simplesect id="TODO.0.4.0">
<title>Road to adg-0.4.0</title>

<itemizedlist mark="circle">
   <listitem override="disc">Split mathematic stuff in its own library. It will be called CPML,
   that is Cairo Path Manipulation Library.</listitem>
   <listitem override="disc">Avoid wrapping of cairo APIs in AdgPath.</listitem>
   <listitem override="disc">Implement AdgToyText, a basic text entity using the cairo "toy" text API.</listitem>
   <listitem override="disc">Implement AdgTranslatable, a shared interface for entities that
   can be translated.</listitem>
   <listitem override="disc">Implement AdgRotable, a shared interface for entities that can be rotated.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.5.0">
<title>Road to adg-0.5.0</title>

<itemizedlist mark="circle">
   <listitem override="disc">Develop a basic demo CPML program to visually check the results.</listitem>
   <listitem override="disc">Provide CPML APIs for accessing cairo paths and browse their segments
   (a contiguous line segment).</listitem>
   <listitem override="disc">Provide CPML APIs for accessing segments and browse their primitives
   (a single line / curve / close path).</listitem>
   <listitem override="disc">CPML APIs to offset cairo paths: specifically, a decent
   approximation for single Bézier curves must be implemented.</listitem>
   <listitem override="disc">Implement APIs to get intersection points between different primitives.</listitem>
   <listitem override="disc">Provide an abstract API (cpml_segment_intersection?) to compute the
   intersection points between two segments. To be evaluated the way to
   return the results (maybe using an argument to specify the maximum
   number of intersections to return).</listitem>
   <listitem override="disc">Generate documentation for CPML.</listitem>
   <listitem override="disc">Merge ldim and adg-demo into a single demo program, basing the user
   interface on GtkBuilder.</listitem>
   <listitem override="disc">Implement AdgModel as a bare empty class. Move the actual stuff in
   AdgTitleBlock.</listitem>
   <listitem override="disc">Rename AdgPath to AdgStroke, being the latter a stroke representation
   of a single AdgPath.</listitem>
   <listitem override="disc">Implement AdgPath as an AdgModel derived class of a conceptual path.
   Any AdgPath instance could be referenced by one or more entities.</listitem>
   <listitem override="disc">Add arcs in CPML to transparently support, whenever possible, the
   conversion between arcs and Bézier curves.</listitem>
   <listitem override="disc">Add to AdgPath the basic functionality to build a path: basically a
   bunch of methods emulating the cairo path API but without the need of
   a yet instantiated cairo context.</listitem>
   <listitem override="disc">Add support for the CPML arc feature in AdgPath.</listitem>
   <listitem override="disc">Update the demo using the newly implemented AdgPath to deeply test the
   model/entity interaction.</listitem>
   <listitem>Add a chamfer operation to AdgPath.</listitem>
   <listitem>Add a fillet operation to AdgPath.</listitem>
   <listitem>Change the matrix entity API, using a cleaner approach.</listitem>
   <listitem>Move AdgTranslatable and AdgRotable directly inside AdgEntity.</listitem>
   <listitem>Ensure there are no bitfield flags, as they are not binding friendly.</listitem>
   <listitem>Change building scripts to get the Gtk+ dependency optional.</listitem>
   <listitem override="disc">Add AdgWidget, a GtkDrawingArea derived class that could accept an AdgCanvas.</listitem>
   <listitem>Optimize the implemented entities applying the 0.3 ADG infractrusture
   and enable caching where applicable.</listitem>
   <listitem>Use AdgToyText to draw dimenstion quote where applicable.</listitem>
   <listitem>Add a "beyond" property to AdgDimStyle to be used when extending the
   baseline beyond the extension lines. If not specified, it must default
   to 3 x arrow size.</listitem>
   <listitem>Add a three-state enum to adg-enums.h: ADG_THREE_STATE_OFF,
   ADG_THREE_STATE_ON and ADG_THREE_STATE_UNKNOWN.</listitem>
   <listitem>Add the three-state "outside" property to allow forcing an outside quote.
   In the default state, the outside must be decided by the space between
   the extension lines: if greather than 3 x arrow size => inside arrows.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.6.0">
<title>Road to adg-0.6.0</title>

<itemizedlist mark="circle">
   <listitem>Implement the outside arrows in AdgLDim.</listitem>
   <listitem>Rename Arrow to Marker: the latter is more generic (that is, better).</listitem>
   <listitem>Rename StyleId to StyleType: the latter is more clear.</listitem>
   <listitem>Implement AdgMarker as a customizable entity able to render (at least)
   the styles defined in AdgMarkerStyleType. Also, the ARROW and TRIANGLE
   styles should follow the director path that could be a curve. Use the
   METAPOST solution suggested by John Hobby I don't know where, that is,
   given <parameter>angle</parameter> and <parameter>size</parameter>, rotate the path by half <parameter>angle</parameter> in both directions,
   look for intersection with a circle at the end of the director path
   with radius <parameter>size</parameter>, close the resulting path and fill the arrow.</listitem>
   <listitem>Rework styles by using GObject and properties.</listitem>
   <listitem>Modify AdgMarkerStyle to use the newly implemented AdgMarker entity.</listitem>
   <listitem>Implement a basic AdgHatchStyle, derived from AdgLineStyle.</listitem>
   <listitem>Add AdgADim, the angular dimension.</listitem>
   <listitem>Add AdgRDim, the radial dimension.</listitem>
   <listitem>AdgPath should be an abstract class from which derive AdgPolyline,
   the basic stroked path entity.</listitem>
   <listitem>Add AdgHatch, an entity very similar to AdgStroke.</listitem>
   <listitem>Add AdgToyTable, a container for AdgToyText in a framed environment.</listitem>
   <listitem>Add AdgTitleBlock, a complex entity in paper space used to frame the
   sheet and show the general drawing data (title, scale, date and so on).</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.unknown">
<title>Road to unknown</title>

<itemizedlist mark="circle">
   <listitem>Add connectivity feature to AdgModel: enable dependencies of models to
   external data. Use libgda as sample data provider.</listitem> 
   <listitem>Add model-view interaction by providing signal propagation from AdgModel
   to the dependent entities, so when a data changes the entities will be
   automatically updated.</listitem>
   <listitem>Implement AdgText, a generic text management, using pango.</listitem>
   <listitem>Add self-intersection API for CPML segments.</listitem>
   <listitem>Implement shape tolerances.</listitem>
   <listitem>Add a CpmlArc primitive and some API to CpmlCurve to be able
   to check if a curve is an arc approximation. This gives additional
   information to do some operation, such as a proper arc offseting.</listitem>
   <listitem>Improve Bézier offset approximation enabling the choice of approximate
   a single curve with multiple offset curves.</listitem>
</itemizedlist>

</simplesect>

</chapter>
